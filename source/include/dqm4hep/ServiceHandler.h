/// \file ServiceHandler.h
/*
 *
 * ServiceHandler.h header template automatically generated by a class generator
 * Creation date : dim. dï¿½c. 4 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SERVICEHANDLER_H
#define SERVICEHANDLER_H

// -- dim headers
#include "dic.hxx"

// -- dqm4hep headers
#include "dqm4hep/NetBuffer.h"
#include "dqm4hep/Signal.h"
#include "dqm4hep/json.h"

namespace dqm4hep {

  namespace net {

    class Client;

    /**
     *
     */
    class ServiceHandler
    {
      friend class Client;
    public:
      typedef core::Signal<const Buffer &> UpdateSignal;

      /**
       * Get the service name
       */
      const std::string &name() const;

      /**
       * Get the client interface
       */
      Client *client() const;

      /**
       * [onServiceUpdate description]
       * @return [description]
       */
      UpdateSignal &onServiceUpdate();

    private:
      /**
       * Constructor
       *
       * @param pClient the client that owns the service handler
       * @param name the service name
       */
      template <typename Controller>
      ServiceHandler(Client *pClient, const std::string &name, Controller *pController, void (Controller::*function)(const Buffer &));

      /**
       * Destructor
       */
      ~ServiceHandler();

    private:
      /** ServiceInfo class.
       *
       *  The concrete dim updated info implementation
       */
      class ServiceInfo : public DimUpdatedInfo
      {
      public:
        /** Contructor
         */
        ServiceInfo(ServiceHandler *pHandler);

        /** The dim rpc handler
         */
        void infoHandler();

      private:
        ServiceHandler        *m_pHandler;
      };

      /**
       * [receiveServiceUpdated description]
       * @param contents [description]
       */
      void receiveServiceUpdated(const Buffer &);

    private:
      std::string                    m_name;             ///< The request handler name
      Client                        *m_pClient;          ///< The client manager
      ServiceInfo                    m_serviceInfo;
      UpdateSignal                   m_updateSignal;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <typename Controller>
    inline ServiceHandler::ServiceHandler(Client *pClient, const std::string &name, Controller *pController, void (Controller::*function)(const Buffer &)) :
      m_name(name),
      m_pClient(pClient),
      m_serviceInfo(this)
    {
      m_updateSignal.connect(pController, function);
    }

  }

}

#endif  //  SERVICEHANDLER_H
